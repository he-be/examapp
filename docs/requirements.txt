LLM評価テスト体験サイト 要件定義書（サーバレス・ステートレス版）
1. 目的と背景
目的
LLM（大規模言語モデル）の性能評価に用いられる主要なベンチマークテストを、人間が実際に体験できるWebサイトを構築する。ユーザーがLLMがどのようなテストで評価されているかを体感し、その能力や限界を直感的に理解することを目的とする。

背景
LLMの評価には多様なベンチマーク（MMLU、GSM-8K、HellaSwag、BIG-Bench-Hard、DROPなど）が存在するが、これらは技術的な文書や論文の中で語られることが多く、一般ユーザーがその内容や難易度を体験する機会は少ない。本サイトは、LLMの評価プロセスを可視化・体験可能にすることで、LLMへの理解を深め、AIリテラシーの向上に寄与する。

技術的背景
サーバレスアーキテクチャ：Cloudflare Workersを利用し、バックエンドのサーバー管理を不要にする。
ステートレス設計：ユーザーの状態（進捗、スコアなど）はサーバーに保存せず、クライアントサイド（ブラウザ）のみで管理する。
静的コンテンツ配信：HTML、CSS、JavaScriptをCloudflare Workersで配信し、動的処理は必要に迫られない限り使用しない。どうしても必要な場合はWorkersで必要最小限に留める。
2. ターゲットユーザー
一般ユーザー（AIやLLMに興味があるが専門知識は不要）
教育関係者（教材・授業での活用を想定）
開発者・研究者（LLM評価の補助ツールとして活用）
学生（AIの学習・体験学習）
3. 機能要件
3.1 体験できるテスト一覧
以下の主要ベンチマークを体験可能とする。各テストは、実際のベンチマークの形式や難易度を再現する。

3.1.1 MMLU（多機能言語理解）
形式：多肢選択式クイズ
内容：57種類の分野（基礎数学、歴史、法律、倫理など）から出題
体験フロー：
分野を選択
複数の選択肢から正解を選ぶ
正解・不正解と解説を表示
3.1.2 GSM-8K（数学的推論）
形式：文章問題（小学校レベルの数学）
内容：多段階の計算・推論が必要な問題
体験フロー：
問題文を提示
ユーザーが解答を入力（数値または式）
正解・不正解と、途中の推論ステップを解説
3.1.3 HellaSwag（常識推論）
形式：物語の結末を選択
内容：常識的に正しい物語の続きを選ぶ
体験フロー：
物語の冒頭を提示
複数の選択肢から「最も自然な続き」を選ぶ
正解・不正解と、なぜその選択が常識的かを解説
3.1.4 BIG-Bench-Hard（高度な推論）
形式：多様なタスク（論理パズル、言語理解など）
内容：AIが苦手とする23の難易度の高いタスク
体験フロー：
タスク例を提示（例：論理クイズ、パターン認識）
ユーザーが解答を入力
正解・不正解と、AIの苦手なポイントを解説
3.1.5 DROP（読解と離散推論）
形式：長文読解＋QA
内容：英語の段落を読み、数値計算・日付比較などを行う問題
体験フロー：
英語の段落を提示
質問に対する解答を入力（数値や日付など）
正解・不正解と、推論プロセスを解説
3.2 UI/UX
直感的なナビゲーション：トップページから各テストへワンクリックでアクセス
体験モード：
練習モード（解説付き）
本番モード（制限時間・スコア集計）
結果表示：
正答率、所要時間、AIモデルの平均スコアとの比較
間違えた問題の復習機能（ブラウザの一時ストレージに保存）
多言語対応：日本語を基本とし、将来的に英語対応を想定
3.3 その他機能
ユーザー登録・ログイン：実装しない。
スコア記録：サーバーに記録しない。ブラウザの一時ストレージ（localStorage）にのみ保存。
ランキング機能：実装しない。
SNS連携：実装しない。
フィードバック機能：問題の難易度や改善点を投稿（Workersでメール送信または外部サービス連携）
4. 非機能要件
4.1 パフォーマンス
ページの表示速度：3秒以内
同時アクセス：Cloudflare Workersのスケーラビリティに依存（基本的に制限なし）
4.2 セキュリティ
ユーザーデータのサーバー保存なし（ステートレス）
基本的なWebセキュリティ対策（CSRF、XSS対策）
HTTPS対応（Cloudflareの標準機能）
4.3 アクセシビリティ
WCAG 2.1 AA準拠
スクリーンリーダー対応
色覚多様性への配慮
4.4 互換性
主要ブラウザ（Chrome、Firefox、Safari、Edge）に対応
モバイル端末（スマートフォン・タブレット）対応
5. 技術要件
5.1 アーキテクチャ
フロントエンド：
HTML, CSS, Typescript
状態管理：localStorageまたはsessionStorage
バックエンド：
Cloudflare Workers 静的ファイル配信も担当
データストア：
問題データ：静的JSONファイル（CDN配信）
ユーザーデータ：なし（ステートレス）
5.2 データフロー
ユーザーがサイトにアクセス。
静的ファイル（HTML, CSS, JS）が配信される。
ユーザーがテストを選択すると、問題データがJSONから読み込まれる。
ユーザーの回答はクライアントサイドで評価（正誤判定）。
結果はブラウザに表示され、localStorageに一時保存（ページを閉じると消える）。
フィードバックが必要な場合のみ、Workersを経由して外部サービス（メール送信など）に連携。
5.3 ステートレス設計の具体例
問題データ：静的JSONとしてCDNに配置。Workersを介さず直接配信可能。
ユーザーの進捗：localStorageに保存。サーバーは関与しない。
スコア計算：クライアントサイドで実行。
フィードバック送信：Workersを経由してメール送信（例：SendGrid API連携）。

5.4 データ構造例
問題データ（静的JSON）
json
{
  "tests": {
    "mmlu": {
      "title": "多機能言語理解（MMLU）",
      "description": "57分野の知識を問う多肢選択テスト",
      "questions": [
        {
          "id": "mmlu_001",
          "category": "数学",
          "question": "次の方程式を解け: 2x + 5 = 15",
          "options": ["x=5", "x=10", "x=15", "x=20"],
          "answer": 0,
          "explanation": "2x + 5 = 15 → 2x = 10 → x=5"
        }
      ]
    },
    "gsm8k": {
      "title": "数学的推論（GSM-8K）",
      "description": "多段階計算が必要な文章問題",
      "questions": [
        {
          "id": "gsm8k_001",
          "question": "リンゴが5個あり、3人で平等に分けると1人何個？",
          "answer": "1.67",
          "steps": ["5÷3=1.666...", "小数第2位で四捨五入"]
        }
      ]
    }
  }
}
クライアントサイド状態管理（localStorage）
javascript
// ユーザー進捗の保存例
const userProgress = {
  currentTest: "mmlu",
  answers: {
    "mmlu_001": 0,
    "gsm8k_001": "1.67"
  },
  startTime: Date.now()
};
localStorage.setItem('llmTestProgress', JSON.stringify(userProgress));
5.5 Cloudflare Workersの役割
javascript
// workers/index.js
export default {
  async fetch(request, env) {
    const url = new URL(request.url);
    
    // フィードバック処理のみサーバーサイドで実行
    if (url.pathname === '/feedback' && request.method === 'POST') {
      const data = await request.json();
      await sendFeedbackToExternalService(data);
      return new Response('Feedback received', { status: 200 });
    }
    
    // 静的ファイルはCloudflare Pagesが自動配信
    return fetch(request);
  }
};

async function sendFeedbackToExternalService(data) {
  // SendGridやSlackに通知
}
6. 運用・保守要件（続き）
6.3 デプロイフロー
フロントエンド:
GitHubリポジトリにプッシュ
Cloudflareで自動デプロイ
カスタムドメイン設定（CDN経由で配信）
Workersスクリプト:
wrangler deployでデプロイ
環境変数はCloudflareダッシュボードで管理
問題データ更新:
JSONファイルを更新してプッシュ
自的にCDNに反映（キャッシュクリア設定が必要）
6.4 監視体制
Uptime監視: Cloudflare Analyticsでアクセス状況を確認
エラー監視: WorkersのログをCloudflare Logsで確認
パフォーマンス: Web Vitalsをクライアントサイドで収集（オプション）
7. 制約・除外事項（続き）
7.4 ステートレス設計の制約
セッション管理不可:
ユーザーがブラウザを閉じると進捗がリセット
複数デバイス間の同期不可
リアルタイム協業機能不可:
ランキングや対戦機能は実装不可
ライブ結果表示不可
データ分析制限:
ユーザー行動分析は匿名アクセスログのみ
A/BテストはlocalStorageベースでのみ実装可能
7.5 セキュリティ制約
機密データ不可:
APIキー等はWorkers環境変数に限定
ユーザー入力データはサーバー保存不可
認証不可:
管理者機能はIP制限等で代替
コンテンツ更新はデプロイプロセスのみ
8. まとめ（サーバレス版）
本システムは以下の特徴を持つ完全ステートレスなWebアプリケーションです：

アーキテクチャ:
Cloudflare Workersによるサーバレス構成
状態管理はクライアントサイド（localStorage）に限定
動的処理は最小限
メリット:
運用コスト最小化（サーバーレス）
スケーラビリティ自動確保
プライバシー保護（ユーザーデータ非保存）
制約:
ユーザー状態の永続化不可
リアルタイム機能不可
高度な分析不可